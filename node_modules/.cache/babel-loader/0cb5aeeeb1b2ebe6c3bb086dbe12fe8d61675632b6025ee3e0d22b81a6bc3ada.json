{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bootcamp\\\\NoteA\\\\NotesApp\\\\src\\\\components\\\\main\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport './Main.css';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport NoteForm from '../notes/NoteForm';\nimport NoteList from '../notes/NotesList';\nimport NewNoteButton from '../notes/NewNoteButton';\nimport NoteButtons from '../notes/NoteButtons';\nimport TaskWidgets from '../notes/TaskWidgets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const [showButtons, setShowButtons] = useState(false);\n  const [updateButtons, setUpdateButtons] = useState(false);\n  const [showFields, setShowFields] = useState(false); //for showing the to do insert UI\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, settodoTitle] = useState('');\n  const [todoContent, settodoContent] = useState('');\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [filterText, setFilterText] = useState('');\n\n  //initial fetch\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/todos');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setTodos(data);\n      } catch (error) {\n        console.error('There was an error fetching the todos ', error);\n      }\n    };\n    fetchTodos();\n  }, []);\n\n  //adding the UI for the adding todo field\n  const handleNewNoteBtn = () => {\n    settodoContent('');\n    settodoTitle('');\n    setShowButtons(true);\n    setUpdateButtons(false);\n    setShowFields(true);\n  };\n  const handleDeleteBtnNew = () => {\n    setShowButtons(false);\n    setShowFields(false);\n  };\n\n  //adding the to do into the database\n  const handleAddBtn = useCallback(async () => {\n    if (todoTitle === \"\" || todoContent === \"\") {\n      alert(\"please fill all fields\");\n      return;\n    }\n    const newTodo = {\n      title: todoTitle,\n      description: todoContent,\n      completed: isCompleted\n    };\n    try {\n      const response = await fetch('http://localhost:8080/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTodo)\n      });\n      const addedTodo = await response.json();\n      setTodos([...todos, addedTodo]);\n      setShowButtons(false);\n      setShowFields(false);\n      setIsCompleted(false);\n      settodoTitle('');\n      settodoContent('');\n    } catch (error) {\n      console.error('Error adding todo: ', error);\n    }\n  }, [todoTitle, todoContent]);\n\n  //when selecting the to do card we get the to do UI field to show up\n  const openNote = todo => {\n    setShowButtons(false);\n    setShowFields(!showFields);\n    setSelectedNote(todo);\n    settodoTitle(todo.title);\n    settodoContent(todo.description);\n    setIsCompleted(todo.completed);\n    setUpdateButtons(!updateButtons);\n  };\n\n  //delete a todo\n  const handleDeleteBtnUpdate = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'DELETE'\n      });\n      const updatedTodos = todos.filter(todo => todo !== selectedNote);\n      setTodos(updatedTodos);\n      setUpdateButtons(false);\n      setShowFields(false);\n      setSelectedNote(null);\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n    }\n  }, [selectedNote, todos]);\n\n  //update the todo\n  const handleUpdateButton = useCallback(async () => {\n    if (todoTitle === \"\" || todoContent === \"\") {\n      alert(\"please fill all fields\");\n      return;\n    }\n    const updatedTodo = {\n      ...selectedNote,\n      title: todoTitle,\n      description: todoContent,\n      completed: isCompleted\n    };\n    try {\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTodo)\n      });\n      const updatedTodoFromServer = await response.json();\n      const updatedTodos = todos.map(todo => todo.id === updatedTodoFromServer.id ? updatedTodoFromServer : todo);\n      setTodos(updatedTodos);\n      settodoTitle('');\n      settodoContent('');\n      setIsCompleted(false);\n      setSelectedNote(null);\n      setUpdateButtons(false);\n      setShowFields(false);\n    } catch (error) {\n      console.error('Error updating todo:', error);\n    }\n  }, [selectedNote, todoTitle, todoContent, isCompleted, todos]);\n\n  //just handling the changes of the text areas\n  const handleTitle = e => {\n    settodoTitle(e.target.value);\n  };\n  const handleContent = e => {\n    settodoContent(e.target.value);\n  };\n  const handleCompletion = e => {\n    setIsCompleted(e.target.checked);\n  };\n\n  //completion\n  const completedTodos = useMemo(() => {\n    return todos.filter(todo => todo.completed).length;\n  }, [todos]);\n  const pendingTodos = useMemo(() => {\n    return todos.filter(todo => !todo.completed).length;\n  }, [todos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesSideBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"notesSideBarTop\",\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          gap: \"5vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(NewNoteButton, {\n          onClick: handleNewNoteBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskWidgets, {\n          completedTodos: completedTodos,\n          pendingTodos: pendingTodos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), showFields && /*#__PURE__*/_jsxDEV(NoteForm, {\n        title: todoTitle,\n        content: todoContent,\n        completed: isCompleted,\n        onTitleChange: handleTitle,\n        onContentChange: handleContent,\n        onChangeCompletion: handleCompletion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NoteButtons, {\n        onAdd: handleAddBtn,\n        onDeleteNew: handleDeleteBtnNew,\n        onUpdate: handleUpdateButton,\n        onDeleteUpdate: handleDeleteBtnUpdate,\n        showAdd: showButtons,\n        showUpdate: updateButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesDashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"notedHeader\",\n        children: \"TO DO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n        notes: todos,\n        onSelect: openNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"9h45LSXlaY98zxh+xTRSc1SbmQM=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","NoteForm","NoteList","NewNoteButton","NoteButtons","TaskWidgets","jsxDEV","_jsxDEV","Main","_s","showButtons","setShowButtons","updateButtons","setUpdateButtons","showFields","setShowFields","todos","setTodos","todoTitle","settodoTitle","todoContent","settodoContent","selectedNote","setSelectedNote","isCompleted","setIsCompleted","filterText","setFilterText","fetchTodos","response","fetch","ok","Error","data","json","error","console","handleNewNoteBtn","handleDeleteBtnNew","handleAddBtn","alert","newTodo","title","description","completed","method","headers","body","JSON","stringify","addedTodo","openNote","todo","handleDeleteBtnUpdate","id","updatedTodos","filter","handleUpdateButton","updatedTodo","updatedTodoFromServer","map","handleTitle","e","target","value","handleContent","handleCompletion","checked","completedTodos","length","pendingTodos","children","style","display","flexDirection","gap","onClick","fileName","_jsxFileName","lineNumber","columnNumber","content","onTitleChange","onContentChange","onChangeCompletion","onAdd","onDeleteNew","onUpdate","onDeleteUpdate","showAdd","showUpdate","notes","onSelect","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/React Bootcamp/NoteA/NotesApp/src/components/main/Main.jsx"],"sourcesContent":["import './Main.css';\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport NoteForm from '../notes/NoteForm';\r\nimport NoteList from '../notes/NotesList';\r\nimport NewNoteButton from '../notes/NewNoteButton';\r\nimport NoteButtons from '../notes/NoteButtons';\r\nimport TaskWidgets from '../notes/TaskWidgets';\r\n\r\nfunction Main() {\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [updateButtons, setUpdateButtons] = useState(false);\r\n  const [showFields, setShowFields] = useState(false); //for showing the to do insert UI\r\n  const [todos, setTodos] = useState([]); \r\n  const [todoTitle, settodoTitle] = useState('');\r\n  const [todoContent, settodoContent] = useState('');\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  const [filterText, setFilterText] = useState('')\r\n\r\n  //initial fetch\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/todos'); \r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        setTodos(data);\r\n      } catch (error) {\r\n        console.error('There was an error fetching the todos ', error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  //adding the UI for the adding todo field\r\n  const handleNewNoteBtn = () => {\r\n    settodoContent('');\r\n    settodoTitle('');\r\n    setShowButtons(true);\r\n    setUpdateButtons(false); \r\n    setShowFields(true); \r\n  };\r\n\r\n  const handleDeleteBtnNew = () => {\r\n    setShowButtons(false);\r\n    setShowFields(false);\r\n  };\r\n\r\n  //adding the to do into the database\r\n  const handleAddBtn = useCallback(async () => {\r\n    if(todoTitle===\"\" || todoContent === \"\"){\r\n      alert(\"please fill all fields\");\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      title: todoTitle,\r\n      description: todoContent,\r\n      completed: isCompleted,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8080/todos', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newTodo),\r\n      });\r\n      \r\n      const addedTodo = await response.json();\r\n      setTodos([...todos, addedTodo]);\r\n      setShowButtons(false);\r\n      setShowFields(false);\r\n      setIsCompleted(false);\r\n      settodoTitle('');\r\n      settodoContent('');\r\n    } catch (error) {\r\n      console.error('Error adding todo: ', error);\r\n    }\r\n  }, [todoTitle, todoContent]);\r\n\r\n  //when selecting the to do card we get the to do UI field to show up\r\n  const openNote = (todo) => {\r\n    setShowButtons(false);\r\n    setShowFields(!showFields);\r\n    setSelectedNote(todo);\r\n    settodoTitle(todo.title);\r\n    settodoContent(todo.description);\r\n    setIsCompleted(todo.completed);\r\n    setUpdateButtons(!updateButtons);\r\n  };\r\n\r\n  //delete a todo\r\n  const handleDeleteBtnUpdate = useCallback(async () => {\r\n    try{\r\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      const updatedTodos = todos.filter(todo => todo !== selectedNote);\r\n      setTodos(updatedTodos);\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n      setSelectedNote(null);\r\n    }catch(error){\r\n      console.error('Error deleting todo:', error);\r\n\r\n    }\r\n\r\n  }, [selectedNote, todos]);\r\n\r\n  //update the todo\r\n  const handleUpdateButton = useCallback(async () => {\r\n    if(todoTitle===\"\" || todoContent === \"\"){\r\n      alert(\"please fill all fields\");\r\n      return;\r\n    }\r\n\r\n      const updatedTodo = {\r\n      ...selectedNote,\r\n      title: todoTitle,\r\n      description: todoContent,\r\n      completed: isCompleted,\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTodo),\r\n      });\r\n      const updatedTodoFromServer = await response.json();\r\n  \r\n      const updatedTodos = todos.map(todo =>\r\n        todo.id === updatedTodoFromServer.id ? updatedTodoFromServer : todo\r\n      );\r\n  \r\n      setTodos(updatedTodos);\r\n      settodoTitle('');\r\n      settodoContent('');\r\n      setIsCompleted(false);\r\n      setSelectedNote(null);\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n  \r\n    } catch (error) {\r\n      console.error('Error updating todo:', error);\r\n    }\r\n  }, [selectedNote, todoTitle, todoContent, isCompleted, todos]);\r\n  \r\n\r\n  //just handling the changes of the text areas\r\n  const handleTitle = (e) => {\r\n    settodoTitle(e.target.value);\r\n  };\r\n\r\n  const handleContent = (e) => {\r\n    settodoContent(e.target.value);\r\n  };\r\n\r\n  const handleCompletion =(e) => {\r\n    setIsCompleted(e.target.checked);\r\n  }\r\n\r\n  //completion\r\n  const completedTodos = useMemo(() => {\r\n    return todos.filter(todo => todo.completed).length;\r\n  }, [todos]);\r\n\r\n  const pendingTodos = useMemo(() => {\r\n    return todos.filter(todo => !todo.completed).length;\r\n  }, [todos]);\r\n\r\n  return (\r\n    <div id='mainBody'>\r\n      <div id=\"notesSideBar\">\r\n        <div id=\"notesSideBarTop\" style={{display: 'flex', flexDirection: 'row', gap: \"5vw\"}}>\r\n          <NewNoteButton onClick={handleNewNoteBtn} />\r\n          <TaskWidgets completedTodos={completedTodos} pendingTodos={pendingTodos}/>\r\n        </div>\r\n        {showFields && (\r\n          <NoteForm\r\n            title={todoTitle}\r\n            content={todoContent}\r\n            completed={isCompleted}\r\n            onTitleChange={handleTitle}\r\n            onContentChange={handleContent}\r\n            onChangeCompletion={handleCompletion}\r\n          />\r\n        )}\r\n        <NoteButtons\r\n          onAdd={handleAddBtn}\r\n          onDeleteNew={handleDeleteBtnNew}\r\n          onUpdate={handleUpdateButton}\r\n          onDeleteUpdate={handleDeleteBtnUpdate}\r\n          showAdd={showButtons}\r\n          showUpdate={updateButtons}\r\n        />\r\n      </div>\r\n      <div id=\"notesDashboard\">\r\n        <h1 id=\"notedHeader\">TO DO</h1>\r\n        \r\n        <NoteList notes={todos} onSelect={openNote} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}