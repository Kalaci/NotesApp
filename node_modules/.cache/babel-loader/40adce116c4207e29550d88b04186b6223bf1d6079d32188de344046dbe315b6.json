{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bootcamp\\\\NoteA\\\\NotesApp\\\\src\\\\components\\\\main\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport './Main.css';\nimport React, { useState, useEffect, useC } from 'react';\nimport NoteForm from '../notes/NoteForm';\nimport NoteList from '../notes/NotesList';\nimport NewNoteButton from '../notes/NewNoteButton';\nimport NoteButtons from '../notes/NoteButtons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const [showButtons, setShowButtons] = useState(false);\n  const [updateButtons, setUpdateButtons] = useState(false);\n  const [showFields, setShowFields] = useState(false); //for showing the to do insert UI\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, settodoTitle] = useState('');\n  const [todoContent, settodoContent] = useState('');\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  //initial fetch\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/todos');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setTodos(data);\n      } catch (error) {\n        console.error('There was an error fetching the todos ', error);\n      }\n    };\n    fetchTodos();\n  }, []);\n\n  //adding the UI for the adding todo field\n  const handleNewNoteBtn = () => {\n    settodoContent('');\n    settodoTitle('');\n    setShowButtons(true);\n    setUpdateButtons(false);\n    setShowFields(true);\n  };\n  const handleDeleteBtnNew = () => {\n    setShowButtons(false);\n    setShowFields(false);\n  };\n\n  //adding the to do into the database\n  const handleAddBtn = useCallback(async () => {\n    const newTodo = {\n      title: todoTitle,\n      content: todoContent\n    };\n    try {\n      const response = await fetch('http://localhost:5000/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTodo)\n      });\n      const addedTodo = await response.json();\n      setTodos([...todos, addedTodo]);\n      setShowButtons(false);\n      setShowFields(false);\n      settodoTitle('');\n      settodoContent('');\n    } catch (error) {\n      console.error('Error adding todo: ', error);\n    }\n  }, [todoTitle, todoContent]);\n\n  //when selecting the to do card we get the to do UI field to show up\n  const openNote = todo => {\n    setShowButtons(false);\n    setShowFields(true);\n    setSelectedNote(todo);\n    settodoTitle(todo.title);\n    settodoContent(todo.content);\n    setUpdateButtons(true);\n  };\n\n  //delete a todo\n  const handleDeleteBtnUpdate = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/todos/${selectedNote.id}`, {\n        method: 'DELETE'\n      });\n      const updatedTodos = todos.filter(todo => todo !== selectedNote);\n      setTodos(updatedTodos);\n      setUpdateButtons(false);\n      setShowFields(false);\n      setSelectedNote(null);\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n    }\n  };\n\n  //update the todo\n  const handleUpdateButton = async () => {\n    const updatedTodo = {\n      ...selectedNote,\n      title: todoTitle,\n      content: todoContent\n    };\n    try {\n      const response = await fetch(`http://localhost:5000/todos/${selectedNote.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTodo)\n      });\n      const updatedTodos = todos.map(todo => todo.id === selectedNote.id ? updatedTodo : todo);\n      setTodos(updatedTodos);\n      settodoTitle('');\n      settodoContent('');\n      setSelectedNote(null);\n      setUpdateButtons(false);\n      setShowFields(false);\n    } catch (error) {\n      console.error('Error updating todo: ', error);\n    }\n  };\n\n  //just handling the changes of the text areas\n  const handleTitle = e => {\n    settodoTitle(e.target.value);\n  };\n  const handleContent = e => {\n    settodoContent(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesSideBar\",\n      children: [/*#__PURE__*/_jsxDEV(NewNoteButton, {\n        onClick: handleNewNoteBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), showFields && /*#__PURE__*/_jsxDEV(NoteForm, {\n        title: todoTitle,\n        content: todoContent,\n        onTitleChange: handleTitle,\n        onContentChange: handleContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NoteButtons, {\n        onAdd: handleAddBtn,\n        onDeleteNew: handleDeleteBtnNew,\n        onUpdate: handleUpdateButton,\n        onDeleteUpdate: handleDeleteBtnUpdate,\n        showAdd: showButtons,\n        showUpdate: updateButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesDashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"notedHeader\",\n        children: \"TO DO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n        notes: todos,\n        onSelect: openNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"/FgVvN7H5uo40/GesCmB3wz4BNk=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useC","NoteForm","NoteList","NewNoteButton","NoteButtons","jsxDEV","_jsxDEV","Main","_s","showButtons","setShowButtons","updateButtons","setUpdateButtons","showFields","setShowFields","todos","setTodos","todoTitle","settodoTitle","todoContent","settodoContent","selectedNote","setSelectedNote","fetchTodos","response","fetch","ok","Error","data","json","error","console","handleNewNoteBtn","handleDeleteBtnNew","handleAddBtn","useCallback","newTodo","title","content","method","headers","body","JSON","stringify","addedTodo","openNote","todo","handleDeleteBtnUpdate","id","updatedTodos","filter","handleUpdateButton","updatedTodo","map","handleTitle","e","target","value","handleContent","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onTitleChange","onContentChange","onAdd","onDeleteNew","onUpdate","onDeleteUpdate","showAdd","showUpdate","notes","onSelect","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/React Bootcamp/NoteA/NotesApp/src/components/main/Main.jsx"],"sourcesContent":["import './Main.css';\r\nimport React, { useState, useEffect, useC } from 'react';\r\nimport NoteForm from '../notes/NoteForm';\r\nimport NoteList from '../notes/NotesList';\r\nimport NewNoteButton from '../notes/NewNoteButton';\r\nimport NoteButtons from '../notes/NoteButtons';\r\n\r\nfunction Main() {\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [updateButtons, setUpdateButtons] = useState(false);\r\n  const [showFields, setShowFields] = useState(false); //for showing the to do insert UI\r\n  const [todos, setTodos] = useState([]); \r\n  const [todoTitle, settodoTitle] = useState('');\r\n  const [todoContent, settodoContent] = useState('');\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n\r\n  //initial fetch\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/todos'); \r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        setTodos(data);\r\n      } catch (error) {\r\n        console.error('There was an error fetching the todos ', error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  //adding the UI for the adding todo field\r\n  const handleNewNoteBtn = () => {\r\n    settodoContent('');\r\n    settodoTitle('');\r\n    setShowButtons(true);\r\n    setUpdateButtons(false); \r\n    setShowFields(true); \r\n  };\r\n\r\n  const handleDeleteBtnNew = () => {\r\n    setShowButtons(false);\r\n    setShowFields(false);\r\n  };\r\n\r\n  //adding the to do into the database\r\n  const handleAddBtn = useCallback (async () => {\r\n    const newTodo = {\r\n      title: todoTitle,\r\n      content: todoContent,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/todos', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newTodo),\r\n      });\r\n      \r\n      const addedTodo = await response.json();\r\n      setTodos([...todos, addedTodo]);\r\n      setShowButtons(false);\r\n      setShowFields(false);\r\n      settodoTitle('');\r\n      settodoContent('');\r\n    } catch (error) {\r\n      console.error('Error adding todo: ', error);\r\n    }\r\n  }, [todoTitle, todoContent]);\r\n\r\n  //when selecting the to do card we get the to do UI field to show up\r\n  const openNote = (todo) => {\r\n    setShowButtons(false);\r\n    setShowFields(true);\r\n    setSelectedNote(todo);\r\n    settodoTitle(todo.title);\r\n    settodoContent(todo.content);\r\n    setUpdateButtons(true);\r\n  };\r\n\r\n  //delete a todo\r\n  const handleDeleteBtnUpdate = async () => {\r\n    try{\r\n      const response = await fetch(`http://localhost:5000/todos/${selectedNote.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      const updatedTodos = todos.filter(todo => todo !== selectedNote);\r\n      setTodos(updatedTodos);\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n      setSelectedNote(null);\r\n    }catch(error){\r\n      console.error('Error deleting todo:', error);\r\n\r\n    }\r\n\r\n  };\r\n\r\n  //update the todo\r\n  const handleUpdateButton = async() => {\r\n    const updatedTodo = {\r\n      ...selectedNote,\r\n      title: todoTitle,\r\n      content: todoContent,\r\n    };\r\n  \r\n    try{\r\n      const response = await fetch(`http://localhost:5000/todos/${selectedNote.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTodo),\r\n      });\r\n\r\n      const updatedTodos = todos.map(todo =>\r\n        todo.id === selectedNote.id ? updatedTodo : todo\r\n      );\r\n  \r\n      setTodos(updatedTodos);\r\n      settodoTitle('');\r\n      settodoContent('');\r\n      setSelectedNote(null);\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n    }catch(error){\r\n      console.error('Error updating todo: ', error);\r\n    }\r\n    \r\n  };\r\n\r\n  //just handling the changes of the text areas\r\n  const handleTitle = (e) => {\r\n    settodoTitle(e.target.value);\r\n  };\r\n\r\n  const handleContent = (e) => {\r\n    settodoContent(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div id='mainBody'>\r\n      <div id=\"notesSideBar\">\r\n        <NewNoteButton onClick={handleNewNoteBtn} />\r\n        {showFields && (\r\n          <NoteForm\r\n            title={todoTitle}\r\n            content={todoContent}\r\n            onTitleChange={handleTitle}\r\n            onContentChange={handleContent}\r\n          />\r\n        )}\r\n        <NoteButtons\r\n          onAdd={handleAddBtn}\r\n          onDeleteNew={handleDeleteBtnNew}\r\n          onUpdate={handleUpdateButton}\r\n          onDeleteUpdate={handleDeleteBtnUpdate}\r\n          showAdd={showButtons}\r\n          showUpdate={updateButtons}\r\n        />\r\n      </div>\r\n      <div id=\"notesDashboard\">\r\n        <h1 id=\"notedHeader\">TO DO</h1>\r\n        <NoteList notes={todos} onSelect={openNote} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}