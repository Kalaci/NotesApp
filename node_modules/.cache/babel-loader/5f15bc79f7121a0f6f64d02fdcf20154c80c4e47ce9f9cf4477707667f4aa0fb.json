{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bootcamp\\\\NoteA\\\\NotesApp\\\\src\\\\components\\\\main\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport './Main.css';\nimport React, { useState, useEffect, useCallback, useReducer, useMemo } from 'react';\nimport NoteForm from '../notes/NoteForm';\nimport NoteList from '../notes/NotesList';\nimport NewNoteButton from '../notes/NewNoteButton';\nimport NoteButtons from '../notes/NoteButtons';\nimport TaskWidgets from '../notes/TaskWidgets';\n\n// Initial state for todos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  todos: [],\n  completedTodos: 0,\n  pendingTodos: 0\n};\n\n// Reducer function for managing todos state\nconst todoReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_TODOS':\n      return {\n        ...state,\n        todos: action.payload\n      };\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n    case 'UPDATE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map(todo => todo.id === action.payload.id ? action.payload : todo)\n      };\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload.id)\n      };\n    case 'UPDATE_COMPLETION_COUNTS':\n      return {\n        ...state,\n        completedTodos: state.todos.filter(todo => todo.completed).length,\n        pendingTodos: state.todos.filter(todo => !todo.completed).length\n      };\n    default:\n      return state;\n  }\n};\nfunction Main() {\n  _s();\n  const [state, dispatch] = useReducer(todoReducer, initialState);\n  const {\n    todos,\n    completedTodos,\n    pendingTodos\n  } = state;\n  const [todoTitle, settodoTitle] = useState('');\n  const [todoContent, settodoContent] = useState('');\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [filterText, setFilterText] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [showButtons, setShowButtons] = useState(false);\n  const [updateButtons, setUpdateButtons] = useState(false);\n  const [showFields, setShowFields] = useState(false);\n\n  // Initial fetch\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/todos');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        dispatch({\n          type: 'SET_TODOS',\n          payload: data\n        });\n      } catch (error) {\n        console.error('There was an error fetching the todos ', error);\n      }\n    };\n    fetchTodos();\n  }, []);\n\n  // Filtered todos based on the filter input\n  const filteredTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const matchesSearch = todo.title.toLowerCase().includes(filterText.toLowerCase()) || todo.description.toLowerCase().includes(filterText.toLowerCase());\n      const matchesStatus = statusFilter === 'all' || statusFilter === 'completed' && todo.completed || statusFilter === 'in-progress' && !todo.completed;\n      return matchesSearch && matchesStatus;\n    });\n  }, [todos, filterText, statusFilter]);\n\n  // Handle adding a new note\n  const handleAddBtn = useCallback(async () => {\n    if (todoTitle === \"\" || todoContent === \"\") {\n      alert(\"Please fill all fields\");\n      return;\n    }\n    const newTodo = {\n      title: todoTitle,\n      description: todoContent,\n      completed: false\n    };\n    try {\n      const response = await fetch('http://localhost:8080/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTodo)\n      });\n      const addedTodo = await response.json();\n      dispatch({\n        type: 'ADD_TODO',\n        payload: addedTodo\n      });\n      setShowButtons(false);\n      setShowFields(false);\n      settodoTitle('');\n      settodoContent('');\n    } catch (error) {\n      console.error('Error adding todo: ', error);\n    }\n  }, [todoTitle, todoContent]);\n\n  // Handle updating the selected note\n  const handleUpdateButton = useCallback(async () => {\n    if (todoTitle === \"\" || todoContent === \"\") {\n      alert(\"Please fill all fields\");\n      return;\n    }\n    const updatedTodo = {\n      ...selectedNote,\n      title: todoTitle,\n      description: todoContent,\n      completed: isCompleted\n    };\n    try {\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTodo)\n      });\n      const updatedTodoFromServer = await response.json();\n      dispatch({\n        type: 'UPDATE_TODO',\n        payload: updatedTodoFromServer\n      });\n      settodoTitle('');\n      settodoContent('');\n      setIsCompleted(false);\n      setSelectedNote(null);\n      setUpdateButtons(false);\n      setShowFields(false);\n    } catch (error) {\n      console.error('Error updating todo:', error);\n    }\n  }, [selectedNote, todoTitle, todoContent, isCompleted]);\n\n  // Handle deletion of the selected note\n  const handleDeleteBtnUpdate = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'DELETE'\n      });\n      dispatch({\n        type: 'DELETE_TODO',\n        payload: selectedNote\n      });\n      setUpdateButtons(false);\n      setShowFields(false);\n      setSelectedNote(null);\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n    }\n  }, [selectedNote]);\n\n  // Update completed and pending todos count\n  useEffect(() => {\n    dispatch({\n      type: 'UPDATE_COMPLETION_COUNTS'\n    });\n  }, [todos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskWidgets, {\n      completedTodos: completedTodos,\n      pendingTodos: pendingTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewNoteButton, {\n      setShowButtons: setShowButtons,\n      showButtons: showButtons,\n      setShowFields: setShowFields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteForm, {\n      todoTitle: todoTitle,\n      settodoTitle: settodoTitle,\n      todoContent: todoContent,\n      settodoContent: settodoContent,\n      handleAddBtn: handleAddBtn,\n      updateButtons: updateButtons,\n      handleUpdateButton: handleUpdateButton,\n      showFields: showFields,\n      setShowFields: setShowFields,\n      selectedNote: selectedNote,\n      setSelectedNote: setSelectedNote,\n      isCompleted: isCompleted,\n      setIsCompleted: setIsCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteButtons, {\n      updateButtons: updateButtons,\n      handleDeleteBtnUpdate: handleDeleteBtnUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n      filteredTodos: filteredTodos,\n      setSelectedNote: setSelectedNote,\n      setShowButtons: setShowButtons,\n      setUpdateButtons: setUpdateButtons,\n      setShowFields: setShowFields,\n      settodoTitle: settodoTitle,\n      settodoContent: settodoContent,\n      setIsCompleted: setIsCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"/2dTBiz/6Gy2g3TBEeL9mRwR5iY=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useReducer","useMemo","NoteForm","NoteList","NewNoteButton","NoteButtons","TaskWidgets","jsxDEV","_jsxDEV","initialState","todos","completedTodos","pendingTodos","todoReducer","state","action","type","payload","map","todo","id","filter","completed","length","Main","_s","dispatch","todoTitle","settodoTitle","todoContent","settodoContent","selectedNote","setSelectedNote","isCompleted","setIsCompleted","filterText","setFilterText","statusFilter","setStatusFilter","showButtons","setShowButtons","updateButtons","setUpdateButtons","showFields","setShowFields","fetchTodos","response","fetch","ok","Error","data","json","error","console","filteredTodos","matchesSearch","title","toLowerCase","includes","description","matchesStatus","handleAddBtn","alert","newTodo","method","headers","body","JSON","stringify","addedTodo","handleUpdateButton","updatedTodo","updatedTodoFromServer","handleDeleteBtnUpdate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/React Bootcamp/NoteA/NotesApp/src/components/main/Main.jsx"],"sourcesContent":["import './Main.css';\r\nimport React, { useState, useEffect, useCallback, useReducer, useMemo } from 'react';\r\nimport NoteForm from '../notes/NoteForm';\r\nimport NoteList from '../notes/NotesList';\r\nimport NewNoteButton from '../notes/NewNoteButton';\r\nimport NoteButtons from '../notes/NoteButtons';\r\nimport TaskWidgets from '../notes/TaskWidgets';\r\n\r\n// Initial state for todos\r\nconst initialState = {\r\n  todos: [],\r\n  completedTodos: 0,\r\n  pendingTodos: 0,\r\n};\r\n\r\n// Reducer function for managing todos state\r\nconst todoReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_TODOS':\r\n      return {\r\n        ...state,\r\n        todos: action.payload,\r\n      };\r\n    case 'ADD_TODO':\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload],\r\n      };\r\n    case 'UPDATE_TODO':\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo => \r\n          todo.id === action.payload.id ? action.payload : todo\r\n        ),\r\n      };\r\n    case 'DELETE_TODO':\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter(todo => todo.id !== action.payload.id),\r\n      };\r\n    case 'UPDATE_COMPLETION_COUNTS':\r\n      return {\r\n        ...state,\r\n        completedTodos: state.todos.filter(todo => todo.completed).length,\r\n        pendingTodos: state.todos.filter(todo => !todo.completed).length,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction Main() {\r\n  const [state, dispatch] = useReducer(todoReducer, initialState);\r\n  const { todos, completedTodos, pendingTodos } = state;\r\n\r\n  const [todoTitle, settodoTitle] = useState('');\r\n  const [todoContent, settodoContent] = useState('');\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  const [filterText, setFilterText] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [updateButtons, setUpdateButtons] = useState(false);\r\n  const [showFields, setShowFields] = useState(false);\r\n\r\n  // Initial fetch\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/todos');\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        dispatch({ type: 'SET_TODOS', payload: data });\r\n      } catch (error) {\r\n        console.error('There was an error fetching the todos ', error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  // Filtered todos based on the filter input\r\n  const filteredTodos = useMemo(() => {\r\n    return todos.filter(todo => {\r\n      const matchesSearch = todo.title.toLowerCase().includes(filterText.toLowerCase()) ||\r\n        todo.description.toLowerCase().includes(filterText.toLowerCase());\r\n\r\n      const matchesStatus = (statusFilter === 'all') ||\r\n        (statusFilter === 'completed' && todo.completed) ||\r\n        (statusFilter === 'in-progress' && !todo.completed);\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [todos, filterText, statusFilter]);\r\n\r\n  // Handle adding a new note\r\n  const handleAddBtn = useCallback(async () => {\r\n    if (todoTitle === \"\" || todoContent === \"\") {\r\n      alert(\"Please fill all fields\");\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      title: todoTitle,\r\n      description: todoContent,\r\n      completed: false,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8080/todos', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newTodo),\r\n      });\r\n\r\n      const addedTodo = await response.json();\r\n      dispatch({ type: 'ADD_TODO', payload: addedTodo });\r\n      setShowButtons(false);\r\n      setShowFields(false);\r\n      settodoTitle('');\r\n      settodoContent('');\r\n    } catch (error) {\r\n      console.error('Error adding todo: ', error);\r\n    }\r\n  }, [todoTitle, todoContent]);\r\n\r\n  // Handle updating the selected note\r\n  const handleUpdateButton = useCallback(async () => {\r\n    if (todoTitle === \"\" || todoContent === \"\") {\r\n      alert(\"Please fill all fields\");\r\n      return;\r\n    }\r\n\r\n    const updatedTodo = {\r\n      ...selectedNote,\r\n      title: todoTitle,\r\n      description: todoContent,\r\n      completed: isCompleted,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTodo),\r\n      });\r\n\r\n      const updatedTodoFromServer = await response.json();\r\n      dispatch({ type: 'UPDATE_TODO', payload: updatedTodoFromServer });\r\n      settodoTitle('');\r\n      settodoContent('');\r\n      setIsCompleted(false);\r\n      setSelectedNote(null);\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n    } catch (error) {\r\n      console.error('Error updating todo:', error);\r\n    }\r\n  }, [selectedNote, todoTitle, todoContent, isCompleted]);\r\n\r\n  // Handle deletion of the selected note\r\n  const handleDeleteBtnUpdate = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      dispatch({ type: 'DELETE_TODO', payload: selectedNote });\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n      setSelectedNote(null);\r\n    } catch (error) {\r\n      console.error('Error deleting todo:', error);\r\n    }\r\n  }, [selectedNote]);\r\n\r\n  // Update completed and pending todos count\r\n  useEffect(() => {\r\n    dispatch({ type: 'UPDATE_COMPLETION_COUNTS' });\r\n  }, [todos]);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <h1>Todo List</h1>\r\n      <TaskWidgets\r\n        completedTodos={completedTodos}\r\n        pendingTodos={pendingTodos}\r\n      />\r\n      <NewNoteButton\r\n        setShowButtons={setShowButtons}\r\n        showButtons={showButtons}\r\n        setShowFields={setShowFields}\r\n      />\r\n      <NoteForm\r\n        todoTitle={todoTitle}\r\n        settodoTitle={settodoTitle}\r\n        todoContent={todoContent}\r\n        settodoContent={settodoContent}\r\n        handleAddBtn={handleAddBtn}\r\n        updateButtons={updateButtons}\r\n        handleUpdateButton={handleUpdateButton}\r\n        showFields={showFields}\r\n        setShowFields={setShowFields}\r\n        selectedNote={selectedNote}\r\n        setSelectedNote={setSelectedNote}\r\n        isCompleted={isCompleted}\r\n        setIsCompleted={setIsCompleted}\r\n      />\r\n      <NoteButtons\r\n        updateButtons={updateButtons}\r\n        handleDeleteBtnUpdate={handleDeleteBtnUpdate}\r\n      />\r\n      <NoteList\r\n        filteredTodos={filteredTodos}\r\n        setSelectedNote={setSelectedNote}\r\n        setShowButtons={setShowButtons}\r\n        setUpdateButtons={setUpdateButtons}\r\n        setShowFields={setShowFields}\r\n        settodoTitle={settodoTitle}\r\n        settodoContent={settodoContent}\r\n        setIsCompleted={setIsCompleted}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}