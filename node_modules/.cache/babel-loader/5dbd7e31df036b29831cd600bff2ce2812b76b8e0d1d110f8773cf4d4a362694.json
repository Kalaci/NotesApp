{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bootcamp\\\\NoteA\\\\NotesApp\\\\src\\\\components\\\\main\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport './Main.css';\nimport React, { useState, useEffect, useCallback, useMemo, useReducer } from 'react';\nimport NoteForm from '../notes/NoteForm';\nimport NoteList from '../notes/NotesList';\nimport NewNoteButton from '../notes/NewNoteButton';\nimport NoteButtons from '../notes/NoteButtons';\nimport TaskWidgets from '../notes/TaskWidgets';\n\n// Reducer function to handle state changes for todos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst todoReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_TODOS':\n      return action.payload;\n    case 'ADD_TASK':\n      return [...state, action.payload];\n    case 'DELETE_TASK':\n      return state.filter(todo => todo.id !== action.payload);\n    case 'UPDATE_TASK':\n      return state.map(todo => todo.id === action.payload.id ? action.payload : todo);\n    default:\n      return state;\n  }\n};\nfunction Main() {\n  _s();\n  const [showButtons, setShowButtons] = useState(false);\n  const [updateButtons, setUpdateButtons] = useState(false);\n  const [showFields, setShowFields] = useState(false);\n  const [todoTitle, settodoTitle] = useState('');\n  const [todoContent, settodoContent] = useState('');\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [filterText, setFilterText] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  // UseReducer setup\n  const [todos, dispatch] = useReducer(todoReducer, []);\n\n  // Fetch todos on initial render\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/todos');\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        dispatch({\n          type: 'SET_TODOS',\n          payload: data\n        });\n      } catch (error) {\n        console.error('Error fetching todos:', error);\n      }\n    };\n    fetchTodos();\n  }, []);\n\n  // Filtered todos based on search text and status filter\n  const filteredTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const matchesSearch = todo.title.toLowerCase().includes(filterText.toLowerCase()) || todo.description.toLowerCase().includes(filterText.toLowerCase());\n      const matchesStatus = statusFilter === 'all' || statusFilter === 'completed' && todo.completed || statusFilter === 'in-progress' && !todo.completed;\n      return matchesSearch && matchesStatus;\n    });\n  }, [todos, filterText, statusFilter]);\n\n  // Completed and pending tasks calculations\n  const completedTodos = useMemo(() => {\n    return todos.filter(todo => todo.completed).length;\n  }, [todos]);\n  const pendingTodos = useMemo(() => {\n    return todos.filter(todo => !todo.completed).length;\n  }, [todos]);\n\n  // Handle new note button click\n  const handleNewNoteBtn = () => {\n    settodoContent('');\n    settodoTitle('');\n    setIsCompleted(false);\n    setShowButtons(true);\n    setUpdateButtons(false);\n    setShowFields(true);\n  };\n\n  // Handle closing the new note form\n  const handleDeleteBtnNew = () => {\n    setShowButtons(false);\n    setShowFields(false);\n  };\n\n  // Handle adding a new note\n  const handleAddBtn = useCallback(async () => {\n    if (todoTitle === \"\" || todoContent === \"\") {\n      alert(\"Please fill all fields\");\n      return;\n    }\n    const newTodo = {\n      title: todoTitle,\n      description: todoContent,\n      completed: false\n    };\n    try {\n      const response = await fetch('http://localhost:8080/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTodo)\n      });\n      const addedTodo = await response.json();\n      dispatch({\n        type: 'ADD_TASK',\n        payload: addedTodo\n      }); // Dispatch ADD_TASK\n      setShowButtons(false);\n      setShowFields(false);\n      settodoTitle('');\n      settodoContent('');\n    } catch (error) {\n      console.error('Error adding todo: ', error);\n    }\n  }, [todoTitle, todoContent]);\n\n  // Open an existing note for editing\n  const openNote = todo => {\n    setShowButtons(false);\n    setShowFields(true);\n    setSelectedNote(todo);\n    settodoTitle(todo.title);\n    settodoContent(todo.description);\n    setIsCompleted(todo.completed);\n    setUpdateButtons(true);\n  };\n\n  // Handle deleting a note\n  const handleDeleteBtnUpdate = useCallback(async () => {\n    try {\n      await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'DELETE'\n      });\n      dispatch({\n        type: 'DELETE_TASK',\n        payload: selectedNote.id\n      }); // Dispatch DELETE_TASK\n      setUpdateButtons(false);\n      setShowFields(false);\n      setSelectedNote(null);\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n    }\n  }, [selectedNote]);\n\n  // Handle updating a note\n  const handleUpdateButton = useCallback(async () => {\n    if (todoTitle === \"\" || todoContent === \"\") {\n      alert(\"Please fill all fields\");\n      return;\n    }\n    const updatedTodo = {\n      ...selectedNote,\n      title: todoTitle,\n      description: todoContent,\n      completed: isCompleted\n    };\n    try {\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTodo)\n      });\n      const updatedTodoFromServer = await response.json();\n      dispatch({\n        type: 'UPDATE_TASK',\n        payload: updatedTodoFromServer\n      }); // Dispatch UPDATE_TASK\n\n      settodoTitle('');\n      settodoContent('');\n      setIsCompleted(false);\n      setSelectedNote(null);\n      setUpdateButtons(false);\n      setShowFields(false);\n    } catch (error) {\n      console.error('Error updating todo:', error);\n    }\n  }, [selectedNote, todoTitle, todoContent, isCompleted]);\n\n  // Handlers for form input changes\n  const handleTitle = useCallback(e => {\n    settodoTitle(e.target.value);\n  }, []);\n  const handleContent = e => {\n    settodoContent(e.target.value);\n  };\n  const handleCompletion = e => {\n    setIsCompleted(e.target.checked);\n  };\n  const handleFilterChange = e => {\n    setFilterText(e.target.value);\n  };\n  const handleStatusFilterChange = e => {\n    setStatusFilter(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesSideBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"notesSideBarTop\",\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          gap: \"5vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(NewNoteButton, {\n          onClick: handleNewNoteBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskWidgets, {\n          completedTodos: completedTodos,\n          pendingTodos: pendingTodos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), showFields && /*#__PURE__*/_jsxDEV(NoteForm, {\n        title: todoTitle,\n        content: todoContent,\n        completed: isCompleted,\n        onTitleChange: handleTitle,\n        onContentChange: handleContent,\n        onChangeCompletion: handleCompletion,\n        isUpdateMode: updateButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NoteButtons, {\n        onAdd: handleAddBtn,\n        onDeleteNew: handleDeleteBtnNew,\n        onUpdate: handleUpdateButton,\n        onDeleteUpdate: handleDeleteBtnUpdate,\n        showAdd: showButtons,\n        showUpdate: updateButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesDashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"notesDashboardHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"notedHeader\",\n          children: \"TO DO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search tasks\",\n          value: filterText,\n          onChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: statusFilter,\n          onChange: handleStatusFilterChange,\n          id: \"statusFilterMenu\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"in-progress\",\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"completed\",\n            children: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n        notes: filteredTodos,\n        onSelect: openNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"AKunbUQVnpuy70NS1I6h9Okos5w=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useReducer","NoteForm","NoteList","NewNoteButton","NoteButtons","TaskWidgets","jsxDEV","_jsxDEV","todoReducer","state","action","type","payload","filter","todo","id","map","Main","_s","showButtons","setShowButtons","updateButtons","setUpdateButtons","showFields","setShowFields","todoTitle","settodoTitle","todoContent","settodoContent","selectedNote","setSelectedNote","isCompleted","setIsCompleted","filterText","setFilterText","statusFilter","setStatusFilter","todos","dispatch","fetchTodos","response","fetch","ok","Error","data","json","error","console","filteredTodos","matchesSearch","title","toLowerCase","includes","description","matchesStatus","completed","completedTodos","length","pendingTodos","handleNewNoteBtn","handleDeleteBtnNew","handleAddBtn","alert","newTodo","method","headers","body","JSON","stringify","addedTodo","openNote","handleDeleteBtnUpdate","handleUpdateButton","updatedTodo","updatedTodoFromServer","handleTitle","e","target","value","handleContent","handleCompletion","checked","handleFilterChange","handleStatusFilterChange","children","style","display","flexDirection","gap","onClick","fileName","_jsxFileName","lineNumber","columnNumber","content","onTitleChange","onContentChange","onChangeCompletion","isUpdateMode","onAdd","onDeleteNew","onUpdate","onDeleteUpdate","showAdd","showUpdate","placeholder","onChange","notes","onSelect","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/React Bootcamp/NoteA/NotesApp/src/components/main/Main.jsx"],"sourcesContent":["import './Main.css';\r\nimport React, { useState, useEffect, useCallback, useMemo, useReducer } from 'react';\r\nimport NoteForm from '../notes/NoteForm';\r\nimport NoteList from '../notes/NotesList';\r\nimport NewNoteButton from '../notes/NewNoteButton';\r\nimport NoteButtons from '../notes/NoteButtons';\r\nimport TaskWidgets from '../notes/TaskWidgets';\r\n\r\n// Reducer function to handle state changes for todos\r\nconst todoReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_TODOS':\r\n      return action.payload;\r\n    case 'ADD_TASK':\r\n      return [...state, action.payload];\r\n    case 'DELETE_TASK':\r\n      return state.filter(todo => todo.id !== action.payload);\r\n    case 'UPDATE_TASK':\r\n      return state.map(todo =>\r\n        todo.id === action.payload.id ? action.payload : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction Main() {\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [updateButtons, setUpdateButtons] = useState(false);\r\n  const [showFields, setShowFields] = useState(false); \r\n  const [todoTitle, settodoTitle] = useState('');\r\n  const [todoContent, settodoContent] = useState('');\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  const [filterText, setFilterText] = useState(''); \r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n\r\n  // UseReducer setup\r\n  const [todos, dispatch] = useReducer(todoReducer, []);\r\n\r\n  // Fetch todos on initial render\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/todos');\r\n        if (!response.ok) throw new Error('Network response was not ok');\r\n        \r\n        const data = await response.json();\r\n        dispatch({ type: 'SET_TODOS', payload: data });\r\n      } catch (error) {\r\n        console.error('Error fetching todos:', error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  // Filtered todos based on search text and status filter\r\n  const filteredTodos = useMemo(() => {\r\n    return todos.filter(todo => {\r\n      const matchesSearch = todo.title.toLowerCase().includes(filterText.toLowerCase()) ||\r\n        todo.description.toLowerCase().includes(filterText.toLowerCase());\r\n\r\n      const matchesStatus = (statusFilter === 'all') ||\r\n        (statusFilter === 'completed' && todo.completed) ||\r\n        (statusFilter === 'in-progress' && !todo.completed);\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [todos, filterText, statusFilter]);\r\n\r\n  // Completed and pending tasks calculations\r\n  const completedTodos = useMemo(() => {\r\n    return todos.filter(todo => todo.completed).length;\r\n  }, [todos]);\r\n\r\n  const pendingTodos = useMemo(() => {\r\n    return todos.filter(todo => !todo.completed).length;\r\n  }, [todos]);\r\n\r\n  // Handle new note button click\r\n  const handleNewNoteBtn = () => {\r\n    settodoContent('');\r\n    settodoTitle('');\r\n    setIsCompleted(false);\r\n    setShowButtons(true);\r\n    setUpdateButtons(false); \r\n    setShowFields(true); \r\n  };\r\n\r\n  // Handle closing the new note form\r\n  const handleDeleteBtnNew = () => {\r\n    setShowButtons(false);\r\n    setShowFields(false);\r\n  };\r\n\r\n  // Handle adding a new note\r\n  const handleAddBtn = useCallback(async () => {\r\n    if(todoTitle === \"\" || todoContent === \"\") {\r\n      alert(\"Please fill all fields\");\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      title: todoTitle,\r\n      description: todoContent,\r\n      completed: false,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8080/todos', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newTodo),\r\n      });\r\n\r\n      const addedTodo = await response.json();\r\n      dispatch({ type: 'ADD_TASK', payload: addedTodo }); // Dispatch ADD_TASK\r\n      setShowButtons(false);\r\n      setShowFields(false);\r\n      settodoTitle('');\r\n      settodoContent('');\r\n    } catch (error) {\r\n      console.error('Error adding todo: ', error);\r\n    }\r\n  }, [todoTitle, todoContent]);\r\n\r\n  // Open an existing note for editing\r\n  const openNote = (todo) => {\r\n    setShowButtons(false);\r\n    setShowFields(true);\r\n    setSelectedNote(todo);\r\n    settodoTitle(todo.title);\r\n    settodoContent(todo.description);\r\n    setIsCompleted(todo.completed);\r\n    setUpdateButtons(true);\r\n  };\r\n\r\n  // Handle deleting a note\r\n  const handleDeleteBtnUpdate = useCallback(async () => {\r\n    try {\r\n      await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      dispatch({ type: 'DELETE_TASK', payload: selectedNote.id }); // Dispatch DELETE_TASK\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n      setSelectedNote(null);\r\n    } catch (error) {\r\n      console.error('Error deleting todo:', error);\r\n    }\r\n  }, [selectedNote]);\r\n\r\n  // Handle updating a note\r\n  const handleUpdateButton = useCallback(async () => {\r\n    if(todoTitle === \"\" || todoContent === \"\") {\r\n      alert(\"Please fill all fields\");\r\n      return;\r\n    }\r\n\r\n    const updatedTodo = {\r\n      ...selectedNote,\r\n      title: todoTitle,\r\n      description: todoContent,\r\n      completed: isCompleted,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTodo),\r\n      });\r\n\r\n      const updatedTodoFromServer = await response.json();\r\n      dispatch({ type: 'UPDATE_TASK', payload: updatedTodoFromServer }); // Dispatch UPDATE_TASK\r\n\r\n      settodoTitle('');\r\n      settodoContent('');\r\n      setIsCompleted(false);\r\n      setSelectedNote(null);\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n    } catch (error) {\r\n      console.error('Error updating todo:', error);\r\n    }\r\n  }, [selectedNote, todoTitle, todoContent, isCompleted]);\r\n\r\n  // Handlers for form input changes\r\n  const handleTitle = useCallback((e) => {\r\n    settodoTitle(e.target.value);\r\n  }, []);\r\n\r\n  const handleContent = (e) => {\r\n    settodoContent(e.target.value);\r\n  };\r\n\r\n  const handleCompletion = (e) => {\r\n    setIsCompleted(e.target.checked);\r\n  };\r\n\r\n  const handleFilterChange = (e) => {\r\n    setFilterText(e.target.value);\r\n  };\r\n\r\n  const handleStatusFilterChange = (e) => {\r\n    setStatusFilter(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div id='mainBody'>\r\n      <div id=\"notesSideBar\">\r\n        <div id=\"notesSideBarTop\" style={{display: 'flex', flexDirection: 'row', gap: \"5vw\"}}>\r\n          <NewNoteButton onClick={handleNewNoteBtn} />\r\n          <TaskWidgets completedTodos={completedTodos} pendingTodos={pendingTodos} />\r\n        </div>\r\n        {showFields && (\r\n          <NoteForm\r\n            title={todoTitle}\r\n            content={todoContent}\r\n            completed={isCompleted}\r\n            onTitleChange={handleTitle}\r\n            onContentChange={handleContent}\r\n            onChangeCompletion={handleCompletion}\r\n            isUpdateMode={updateButtons}\r\n          />\r\n        )}\r\n        <NoteButtons\r\n          onAdd={handleAddBtn}\r\n          onDeleteNew={handleDeleteBtnNew}\r\n          onUpdate={handleUpdateButton}\r\n          onDeleteUpdate={handleDeleteBtnUpdate}\r\n          showAdd={showButtons}\r\n          showUpdate={updateButtons}\r\n        />\r\n      </div>\r\n      <div id=\"notesDashboard\">\r\n        <div id=\"notesDashboardHeader\">\r\n          <h1 id=\"notedHeader\">TO DO</h1>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Search tasks\" \r\n            value={filterText} \r\n            onChange={handleFilterChange} \r\n          />\r\n          <select value={statusFilter} onChange={handleStatusFilterChange} id=\"statusFilterMenu\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"in-progress\">In Progress</option>\r\n            <option value=\"completed\">Completed</option>\r\n          </select>\r\n        </div>\r\n        <NoteList notes={filteredTodos} onSelect={openNote} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}