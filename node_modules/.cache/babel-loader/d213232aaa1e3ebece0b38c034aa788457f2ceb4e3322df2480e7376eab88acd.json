{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bootcamp\\\\NoteA\\\\NotesApp\\\\src\\\\components\\\\main\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport './Main.css';\nimport React, { useState, useEffect } from 'react';\nimport NoteForm from '../notes/NoteForm';\nimport NoteList from '../notes/NotesList';\nimport NewNoteButton from '../notes/NewNoteButton';\nimport NoteButtons from '../notes/NoteButtons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const [showButtons, setShowButtons] = useState(false);\n  const [updateButtons, setUpdateButtons] = useState(false);\n  const [showFields, setShowFields] = useState(false);\n  const [notes, setNotes] = useState([]);\n  const [noteTitle, setNoteTitle] = useState('');\n  const [noteContent, setNoteContent] = useState('');\n  const [selectedNote, setSelectedNote] = useState();\n\n  // Fetch existing notes on component mount\n  useEffect(() => {\n    const fetchNotes = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/todos');\n        const data = await response.json();\n        setNotes(data);\n      } catch (error) {\n        console.error('Error fetching notes:', error);\n      }\n    };\n    fetchNotes();\n  }, []);\n  const handleNewNoteBtn = () => {\n    setNoteContent('');\n    setNoteTitle('');\n    setShowButtons(true);\n    setUpdateButtons(false);\n    setShowFields(true);\n  };\n  const handleDeleteBtnNew = () => {\n    setShowButtons(false);\n    setShowFields(false);\n  };\n  const handleAddBtn = async () => {\n    const newNote = {\n      title: noteTitle,\n      content: noteContent\n    };\n    try {\n      const response = await fetch('http://localhost:8080/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newNote)\n      });\n      const addedNote = await response.json(); // Assuming your API returns the added note\n      setNotes([...notes, addedNote]);\n    } catch (error) {\n      console.error('Error adding note:', error);\n    }\n    setShowButtons(false);\n    setShowFields(false);\n  };\n  const openNote = note => {\n    setShowButtons(false);\n    setShowFields(true);\n    setSelectedNote(note);\n    setNoteTitle(note.title);\n    setNoteContent(note.content);\n    setUpdateButtons(true);\n  };\n  const handleDeleteBtnUpdate = async () => {\n    try {\n      await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'DELETE'\n      });\n      const updatedNotes = notes.filter(note => note.id !== selectedNote.id);\n      setNotes(updatedNotes);\n    } catch (error) {\n      console.error('Error deleting note:', error);\n    }\n    setUpdateButtons(false);\n    setShowFields(false);\n  };\n  const handleUpdateButton = async () => {\n    const updatedNote = {\n      title: noteTitle,\n      content: noteContent\n    };\n    try {\n      await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedNote)\n      });\n      const updatedNotes = notes.map(note => note.id === selectedNote.id ? {\n        ...note,\n        title: noteTitle,\n        content: noteContent\n      } : note);\n      setNotes(updatedNotes);\n    } catch (error) {\n      console.error('Error updating note:', error);\n    }\n    setNoteTitle('');\n    setNoteContent('');\n    setSelectedNote(null);\n    setUpdateButtons(false);\n    setShowFields(false);\n  };\n  const handleTitle = e => {\n    setNoteTitle(e.target.value);\n  };\n  const handleContent = e => {\n    setNoteContent(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesSideBar\",\n      children: [/*#__PURE__*/_jsxDEV(NewNoteButton, {\n        onClick: handleNewNoteBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), showFields && /*#__PURE__*/_jsxDEV(NoteForm, {\n        title: noteTitle,\n        content: noteContent,\n        onTitleChange: handleTitle,\n        onContentChange: handleContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NoteButtons, {\n        onAdd: handleAddBtn,\n        onDeleteNew: handleDeleteBtnNew,\n        onUpdate: handleUpdateButton,\n        onDeleteUpdate: handleDeleteBtnUpdate,\n        showAdd: showButtons,\n        showUpdate: updateButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesDashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"notedHeader\",\n        children: \" TO DO \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n        notes: notes,\n        onSelect: openNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"cd7uYm8G8MnobyHS4X8x1NBXhzI=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","NoteForm","NoteList","NewNoteButton","NoteButtons","jsxDEV","_jsxDEV","Main","_s","showButtons","setShowButtons","updateButtons","setUpdateButtons","showFields","setShowFields","notes","setNotes","noteTitle","setNoteTitle","noteContent","setNoteContent","selectedNote","setSelectedNote","fetchNotes","response","fetch","data","json","error","console","handleNewNoteBtn","handleDeleteBtnNew","handleAddBtn","newNote","title","content","method","headers","body","JSON","stringify","addedNote","openNote","note","handleDeleteBtnUpdate","id","updatedNotes","filter","handleUpdateButton","updatedNote","map","handleTitle","e","target","value","handleContent","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onTitleChange","onContentChange","onAdd","onDeleteNew","onUpdate","onDeleteUpdate","showAdd","showUpdate","onSelect","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/React Bootcamp/NoteA/NotesApp/src/components/main/Main.jsx"],"sourcesContent":["import './Main.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport NoteForm from '../notes/NoteForm';\r\nimport NoteList from '../notes/NotesList';\r\nimport NewNoteButton from '../notes/NewNoteButton';\r\nimport NoteButtons from '../notes/NoteButtons';\r\n\r\nfunction Main() {\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [updateButtons, setUpdateButtons] = useState(false);\r\n  const [showFields, setShowFields] = useState(false);\r\n  const [notes, setNotes] = useState([]);\r\n  const [noteTitle, setNoteTitle] = useState('');\r\n  const [noteContent, setNoteContent] = useState('');\r\n  const [selectedNote, setSelectedNote] = useState();\r\n\r\n  // Fetch existing notes on component mount\r\n  useEffect(() => {\r\n    const fetchNotes = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/todos');\r\n        const data = await response.json();\r\n        setNotes(data);\r\n      } catch (error) {\r\n        console.error('Error fetching notes:', error);\r\n      }\r\n    };\r\n    fetchNotes();\r\n  }, []);\r\n\r\n  const handleNewNoteBtn = () => {\r\n    setNoteContent('');\r\n    setNoteTitle('');\r\n    setShowButtons(true);\r\n    setUpdateButtons(false);\r\n    setShowFields(true);\r\n  };\r\n\r\n  const handleDeleteBtnNew = () => {\r\n    setShowButtons(false);\r\n    setShowFields(false);\r\n  };\r\n\r\n  const handleAddBtn = async () => {\r\n    const newNote = {\r\n      title: noteTitle,\r\n      content: noteContent,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8080/todos', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newNote),\r\n      });\r\n      const addedNote = await response.json(); // Assuming your API returns the added note\r\n      setNotes([...notes, addedNote]);\r\n    } catch (error) {\r\n      console.error('Error adding note:', error);\r\n    }\r\n\r\n    setShowButtons(false);\r\n    setShowFields(false);\r\n  };\r\n\r\n  const openNote = (note) => {\r\n    setShowButtons(false);\r\n    setShowFields(true);\r\n    setSelectedNote(note);\r\n    setNoteTitle(note.title);\r\n    setNoteContent(note.content);\r\n    setUpdateButtons(true);\r\n  };\r\n\r\n  const handleDeleteBtnUpdate = async () => {\r\n    try {\r\n      await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n      const updatedNotes = notes.filter(note => note.id !== selectedNote.id);\r\n      setNotes(updatedNotes);\r\n    } catch (error) {\r\n      console.error('Error deleting note:', error);\r\n    }\r\n\r\n    setUpdateButtons(false);\r\n    setShowFields(false);\r\n  };\r\n\r\n  const handleUpdateButton = async () => {\r\n    const updatedNote = {\r\n      title: noteTitle,\r\n      content: noteContent,\r\n    };\r\n\r\n    try {\r\n      await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedNote),\r\n      });\r\n      const updatedNotes = notes.map(note => \r\n        note.id === selectedNote.id \r\n          ? { ...note, title: noteTitle, content: noteContent } \r\n          : note\r\n      );\r\n      setNotes(updatedNotes);\r\n    } catch (error) {\r\n      console.error('Error updating note:', error);\r\n    }\r\n\r\n    setNoteTitle('');\r\n    setNoteContent('');\r\n    setSelectedNote(null);\r\n    setUpdateButtons(false);\r\n    setShowFields(false);\r\n  };\r\n\r\n  const handleTitle = (e) => {\r\n    setNoteTitle(e.target.value);\r\n  };\r\n\r\n  const handleContent = (e) => {\r\n    setNoteContent(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div id='mainBody'>\r\n      <div id=\"notesSideBar\">\r\n        <NewNoteButton onClick={handleNewNoteBtn} />\r\n        {showFields && (\r\n          <NoteForm\r\n            title={noteTitle}\r\n            content={noteContent}\r\n            onTitleChange={handleTitle}\r\n            onContentChange={handleContent}\r\n          />\r\n        )}\r\n        <NoteButtons\r\n          onAdd={handleAddBtn}\r\n          onDeleteNew={handleDeleteBtnNew}\r\n          onUpdate={handleUpdateButton}\r\n          onDeleteUpdate={handleDeleteBtnUpdate}\r\n          showAdd={showButtons}\r\n          showUpdate={updateButtons}\r\n        />\r\n      </div>\r\n      <div id=\"notesDashboard\">\r\n        <h1 id=\"notedHeader\"> TO DO </h1>\r\n        <NoteList notes={notes} onSelect={openNote} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}