{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React Bootcamp\\\\NoteA\\\\NotesApp\\\\src\\\\components\\\\main\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport './Main.css';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport NoteForm from '../notes/NoteForm';\nimport NoteList from '../notes/NotesList';\nimport NewNoteButton from '../notes/NewNoteButton';\nimport NoteButtons from '../notes/NoteButtons';\nimport TaskWidgets from '../notes/TaskWidgets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const [showButtons, setShowButtons] = useState(false);\n  const [updateButtons, setUpdateButtons] = useState(false);\n  const [showFields, setShowFields] = useState(false);\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, settodoTitle] = useState('');\n  const [todoContent, settodoContent] = useState('');\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [filterText, setFilterText] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  //initial fetch\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/todos');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setTodos(data);\n      } catch (error) {\n        console.error('There was an error fetching the todos ', error);\n      }\n    };\n    fetchTodos();\n  }, []);\n\n  //filtered notes based on the filter input\n  const filteredTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const matchesSearch = todo.title.toLowerCase().includes(filterText.toLowerCase()) || todo.description.toLowerCase().includes(filterText.toLowerCase());\n      const matchesStatus = statusFilter === 'all' || statusFilter === 'completed' && todo.completed || statusFilter === 'in-progress' && !todo.completed;\n      return matchesSearch && matchesStatus;\n    });\n  }, [todos, filterText, statusFilter]);\n\n  //calculating the completion of the tasks\n  const completedTodos = useMemo(() => {\n    return todos.filter(todo => todo.completed).length;\n  }, [todos]);\n  const pendingTodos = useMemo(() => {\n    return todos.filter(todo => !todo.completed).length;\n  }, [todos]);\n\n  //prepare the UI for entering a new note\n  const handleNewNoteBtn = () => {\n    settodoContent('');\n    settodoTitle('');\n    setIsCompleted(false);\n    setShowButtons(true);\n    setUpdateButtons(false);\n    setShowFields(true);\n  };\n\n  //closing the input UI\n  const handleDeleteBtnNew = () => {\n    setShowButtons(false);\n    setShowFields(false);\n  };\n\n  //handle adding a new note\n  const handleAddBtn = useCallback(async () => {\n    if (todoTitle === \"\" || todoContent === \"\") {\n      alert(\"Please fill all fields\");\n      return;\n    }\n    const newTodo = {\n      title: todoTitle,\n      description: todoContent,\n      completed: false\n    };\n    try {\n      const response = await fetch('http://localhost:8080/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTodo)\n      });\n      const addedTodo = await response.json();\n      setTodos([...todos, addedTodo]);\n      setShowButtons(false);\n      setShowFields(false);\n      setIsCompleted(false);\n      settodoTitle('');\n      settodoContent('');\n    } catch (error) {\n      console.error('Error adding todo: ', error);\n    }\n  }, [todoTitle, todoContent, todos]);\n\n  //opening existing note/to do for editing \n  const openNote = todo => {\n    setShowButtons(false);\n    setShowFields(true);\n    setSelectedNote(todo);\n    settodoTitle(todo.title);\n    settodoContent(todo.description);\n    setIsCompleted(todo.completed);\n    setUpdateButtons(true);\n  };\n\n  //handling deletion of the selected note/to do\n  const handleDeleteBtnUpdate = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'DELETE'\n      });\n      const updatedTodos = todos.filter(todo => todo !== selectedNote);\n      setTodos(updatedTodos);\n      setUpdateButtons(false);\n      setShowFields(false);\n      setSelectedNote(null);\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n    }\n  }, [selectedNote, todos]);\n  const handleUpdateButton = useCallback(async () => {\n    if (todoTitle === \"\" || todoContent === \"\") {\n      alert(\"please fill all fields\");\n      return;\n    }\n    const updatedTodo = {\n      ...selectedNote,\n      title: todoTitle,\n      description: todoContent,\n      completed: isCompleted\n    };\n    try {\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTodo)\n      });\n      const updatedTodoFromServer = await response.json();\n      const updatedTodos = todos.map(todo => todo.id === updatedTodoFromServer.id ? updatedTodoFromServer : todo);\n      setTodos(updatedTodos);\n      settodoTitle('');\n      settodoContent('');\n      setIsCompleted(false);\n      setSelectedNote(null);\n      setUpdateButtons(false);\n      setShowFields(false);\n    } catch (error) {\n      console.error('Error updating todo:', error);\n    }\n  }, [selectedNote, todoTitle, todoContent, isCompleted, todos]);\n\n  //simple handlers for updating values\n  const handleTitle = useCallback(e => {\n    settodoTitle(e.target.value);\n  });\n  const handleContent = useCallback(e => {\n    settodoContent(e.target.value);\n  });\n  const handleCompletion = useCallback(e => {\n    setIsCompleted(e.target.checked);\n  });\n  const handleFilterChange = useCallback(e => {\n    setFilterText(e.target.value);\n  });\n  const handleStatusFilterChange = e => {\n    setStatusFilter(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesSideBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"notesSideBarTop\",\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          gap: \"5vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(NewNoteButton, {\n          onClick: handleNewNoteBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskWidgets, {\n          completedTodos: completedTodos,\n          pendingTodos: pendingTodos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), showFields && /*#__PURE__*/_jsxDEV(NoteForm, {\n        title: todoTitle,\n        content: todoContent,\n        completed: isCompleted,\n        onTitleChange: handleTitle,\n        onContentChange: handleContent,\n        onChangeCompletion: handleCompletion,\n        isUpdateMode: updateButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NoteButtons, {\n        onAdd: handleAddBtn,\n        onDeleteNew: handleDeleteBtnNew,\n        onUpdate: handleUpdateButton,\n        onDeleteUpdate: handleDeleteBtnUpdate,\n        showAdd: showButtons,\n        showUpdate: updateButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"notesDashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"notesDashboardHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"notedHeader\",\n          children: \"TO DO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search tasks\",\n          value: filterText,\n          onChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: statusFilter,\n          onChange: handleStatusFilterChange,\n          id: \"statusFilterMenu\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"in-progress\",\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"completed\",\n            children: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoteList, {\n        notes: filteredTodos,\n        onSelect: openNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"/mi8fCyVgLbJh6hU5L3fLtoryrI=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","NoteForm","NoteList","NewNoteButton","NoteButtons","TaskWidgets","jsxDEV","_jsxDEV","Main","_s","showButtons","setShowButtons","updateButtons","setUpdateButtons","showFields","setShowFields","todos","setTodos","todoTitle","settodoTitle","todoContent","settodoContent","selectedNote","setSelectedNote","isCompleted","setIsCompleted","filterText","setFilterText","statusFilter","setStatusFilter","fetchTodos","response","fetch","ok","Error","data","json","error","console","filteredTodos","filter","todo","matchesSearch","title","toLowerCase","includes","description","matchesStatus","completed","completedTodos","length","pendingTodos","handleNewNoteBtn","handleDeleteBtnNew","handleAddBtn","alert","newTodo","method","headers","body","JSON","stringify","addedTodo","openNote","handleDeleteBtnUpdate","id","updatedTodos","handleUpdateButton","updatedTodo","updatedTodoFromServer","map","handleTitle","e","target","value","handleContent","handleCompletion","checked","handleFilterChange","handleStatusFilterChange","children","style","display","flexDirection","gap","onClick","fileName","_jsxFileName","lineNumber","columnNumber","content","onTitleChange","onContentChange","onChangeCompletion","isUpdateMode","onAdd","onDeleteNew","onUpdate","onDeleteUpdate","showAdd","showUpdate","type","placeholder","onChange","notes","onSelect","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/React Bootcamp/NoteA/NotesApp/src/components/main/Main.jsx"],"sourcesContent":["import './Main.css';\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport NoteForm from '../notes/NoteForm';\r\nimport NoteList from '../notes/NotesList';\r\nimport NewNoteButton from '../notes/NewNoteButton';\r\nimport NoteButtons from '../notes/NoteButtons';\r\nimport TaskWidgets from '../notes/TaskWidgets';\r\n\r\nfunction Main() {\r\n  const [showButtons, setShowButtons] = useState(false);\r\n  const [updateButtons, setUpdateButtons] = useState(false);\r\n  const [showFields, setShowFields] = useState(false); \r\n  const [todos, setTodos] = useState([]); \r\n  const [todoTitle, settodoTitle] = useState('');\r\n  const [todoContent, settodoContent] = useState('');\r\n  const [selectedNote, setSelectedNote] = useState(null);\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  const [filterText, setFilterText] = useState(''); \r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n\r\n  //initial fetch\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/todos'); \r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        setTodos(data);\r\n      } catch (error) {\r\n        console.error('There was an error fetching the todos ', error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  //filtered notes based on the filter input\r\n  const filteredTodos = useMemo(() => {\r\n    return todos.filter(todo => {\r\n      const matchesSearch = todo.title.toLowerCase().includes(filterText.toLowerCase()) ||\r\n        todo.description.toLowerCase().includes(filterText.toLowerCase());\r\n\r\n      const matchesStatus = (statusFilter === 'all') ||\r\n        (statusFilter === 'completed' && todo.completed) ||\r\n        (statusFilter === 'in-progress' && !todo.completed);\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [todos, filterText, statusFilter]);\r\n\r\n  //calculating the completion of the tasks\r\n  const completedTodos = useMemo(() => {\r\n    return todos.filter(todo => todo.completed).length;\r\n  }, [todos]);\r\n\r\n  const pendingTodos = useMemo(() => {\r\n\r\n    return todos.filter(todo => !todo.completed).length;\r\n  }, [todos]);\r\n\r\n  //prepare the UI for entering a new note\r\n  const handleNewNoteBtn = () => {\r\n    settodoContent('');\r\n    settodoTitle('');\r\n    setIsCompleted(false)\r\n    setShowButtons(true);\r\n    setUpdateButtons(false); \r\n    setShowFields(true); \r\n  };\r\n\r\n  //closing the input UI\r\n  const handleDeleteBtnNew = () => {\r\n    setShowButtons(false);\r\n    setShowFields(false);\r\n  };\r\n\r\n  //handle adding a new note\r\n  const handleAddBtn = useCallback(async () => {\r\n\r\n    if(todoTitle===\"\" || todoContent === \"\"){\r\n      alert(\"Please fill all fields\");\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      title: todoTitle,\r\n      description: todoContent,\r\n      completed: false,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8080/todos', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newTodo),\r\n      });\r\n      \r\n      const addedTodo = await response.json();\r\n      setTodos([...todos, addedTodo]);\r\n      setShowButtons(false);\r\n      setShowFields(false);\r\n      setIsCompleted(false);\r\n      settodoTitle('');\r\n      settodoContent('');\r\n    } catch (error) {\r\n      console.error('Error adding todo: ', error);\r\n    }\r\n  }, [todoTitle, todoContent, todos]);\r\n\r\n  //opening existing note/to do for editing \r\n  const openNote = (todo) => {\r\n    setShowButtons(false);\r\n    setShowFields(true);\r\n    setSelectedNote(todo);\r\n    settodoTitle(todo.title);\r\n    settodoContent(todo.description);\r\n    setIsCompleted(todo.completed);\r\n    setUpdateButtons(true);\r\n  };\r\n\r\n  //handling deletion of the selected note/to do\r\n  const handleDeleteBtnUpdate = useCallback(async () => {\r\n    \r\n    try {\r\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      const updatedTodos = todos.filter(todo => todo !== selectedNote);\r\n      setTodos(updatedTodos);\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n      setSelectedNote(null);\r\n    } catch (error) {\r\n      console.error('Error deleting todo:', error);\r\n    }\r\n  }, [selectedNote, todos]);\r\n\r\n  const handleUpdateButton = useCallback(async () => {\r\n    if(todoTitle===\"\" || todoContent === \"\"){\r\n      alert(\"please fill all fields\");\r\n      return;\r\n    }\r\n\r\n    const updatedTodo = {\r\n      ...selectedNote,\r\n      title: todoTitle,\r\n      description: todoContent,\r\n      completed: isCompleted,\r\n    };\r\n  \r\n    try {\r\n      const response = await fetch(`http://localhost:8080/todos/${selectedNote.id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedTodo),\r\n      });\r\n      const updatedTodoFromServer = await response.json();\r\n  \r\n      const updatedTodos = todos.map(todo =>\r\n        todo.id === updatedTodoFromServer.id ? updatedTodoFromServer : todo\r\n      );\r\n  \r\n      setTodos(updatedTodos);\r\n      settodoTitle('');\r\n      settodoContent('');\r\n      setIsCompleted(false);\r\n      setSelectedNote(null);\r\n      setUpdateButtons(false);\r\n      setShowFields(false);\r\n  \r\n    } catch (error) {\r\n      console.error('Error updating todo:', error);\r\n    }\r\n  }, [selectedNote, todoTitle, todoContent, isCompleted, todos]);\r\n\r\n  //simple handlers for updating values\r\n  const handleTitle = useCallback((e) => {\r\n    settodoTitle(e.target.value);\r\n  });\r\n\r\n  const handleContent = useCallback((e) => {\r\n    settodoContent(e.target.value);\r\n  });\r\n\r\n  const handleCompletion = useCallback((e) => {\r\n    setIsCompleted(e.target.checked);\r\n  });\r\n\r\n  const handleFilterChange = useCallback((e) => {\r\n    setFilterText(e.target.value);\r\n  });\r\n\r\n  const handleStatusFilterChange = (e) => {\r\n    setStatusFilter(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div id='mainBody'>\r\n      <div id=\"notesSideBar\">\r\n        <div id=\"notesSideBarTop\" style={{display: 'flex', flexDirection: 'row', gap: \"5vw\"}}>\r\n          <NewNoteButton onClick={handleNewNoteBtn} />\r\n          <TaskWidgets completedTodos={completedTodos} pendingTodos={pendingTodos}/>\r\n        </div>\r\n        {showFields && (\r\n          <NoteForm\r\n            title={todoTitle}\r\n            content={todoContent}\r\n            completed={isCompleted}\r\n            onTitleChange={handleTitle}\r\n            onContentChange={handleContent}\r\n            onChangeCompletion={handleCompletion}\r\n            isUpdateMode={updateButtons}\r\n          />\r\n        )}\r\n        <NoteButtons\r\n          onAdd={handleAddBtn}\r\n          onDeleteNew={handleDeleteBtnNew}\r\n          onUpdate={handleUpdateButton}\r\n          onDeleteUpdate={handleDeleteBtnUpdate}\r\n          showAdd={showButtons}\r\n          showUpdate={updateButtons}\r\n        />\r\n      </div>\r\n      <div id=\"notesDashboard\">\r\n        <div id=\"notesDashboardHeader\">\r\n          <h1 id=\"notedHeader\">TO DO</h1>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Search tasks\" \r\n            value={filterText} \r\n            onChange={handleFilterChange} \r\n          />\r\n           <select value={statusFilter} onChange={handleStatusFilterChange} id=\"statusFilterMenu\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"in-progress\">In Progress</option>\r\n            <option value=\"completed\">Completed</option>\r\n          </select>\r\n        </div>\r\n        <NoteList notes={filteredTodos} onSelect={openNote} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}